How to set this thing up:

Connect the Numato GPIO USB thing to the windows box, and figure out
which COM port it gets assigned to. On Linux, this is /dev/ttyACM0,
but it will be COM something on windows. You'll have to change the
com port in winch_settings.py

The APM "relay" is actually output channel A9. For some weird reason,
in the mission planner the relay pin is set to 13 (see the comment)
Connect the '-' pin (nearest edge) of A9 to the GND terminal of the USBGPIO, 
and connect the 'S' pin (farthest from edge) of A9 to the IO0 terminal of 
the USBGPIO.

Now you can use 'DO_SET_RELAY'
commands in the mission planner to trigger CTD casts, assuming you're
running the ctd.py program on the windows box and have enabled them to
be triggered this way by pressing the "Enable cast on gpio" button. 

A transition from 0 to 1 will trigger a cast.  The PC has to poll the
GPIO, so both the 0 and the 1 should be set for at least a second.
There is also a towyo mode, which will continue tow-yoing until the
pin is set back to 0.

At this point, the CTD cast still does not force the vehicle to stop
moving. For that, we have to hook an output of the USBGPIO to an input
of the APM. For this, we will use A8.  [RH] This used to be on A5, but that
seemed flaky. Enable this behavior by setting the AUTO_TRIGGER_PIN to 8
in the mission planner. Now the throttle will always be set to the
minimum value unless the A8 signal is attached to ground.

 Attach the
'-' line of A5 back to the USBGPIO GND terminal, and the 'S' line of
A5 to the USBGPIO IO1 terminal.

When the system comes up, A5 may be asserted, which means the vehicle
will not move until the USBGPIO brings it low. The "Force enable
autopilot via GPIO" button in the UI does this without causing a CTD
cast, so this is kind of like an "arm" switch to enable the throttle
to come up. Then, whenever the PC detects the DO_SET_RELAY has
happened, it will cause the throttle to go to minimum, do the cast,
then bring the throttle back up after the CTD is back on board.


